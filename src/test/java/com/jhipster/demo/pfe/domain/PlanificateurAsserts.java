package com.jhipster.demo.pfe.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlanificateurAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanificateurAllPropertiesEquals(Planificateur expected, Planificateur actual) {
        assertPlanificateurAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanificateurAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanificateurAllUpdatablePropertiesEquals(Planificateur expected, Planificateur actual) {
        assertPlanificateurUpdatableFieldsEquals(expected, actual);
        assertPlanificateurUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanificateurAutoGeneratedPropertiesEquals(Planificateur expected, Planificateur actual) {
        assertThat(expected)
            .as("Verify Planificateur auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanificateurUpdatableFieldsEquals(Planificateur expected, Planificateur actual) {
        assertThat(expected)
            .as("Verify Planificateur relevant properties")
            .satisfies(e -> assertThat(e.getNom()).as("check nom").isEqualTo(actual.getNom()))
            .satisfies(e -> assertThat(e.getNiveauExpertise()).as("check niveauExpertise").isEqualTo(actual.getNiveauExpertise()))
            .satisfies(e -> assertThat(e.getDisponibilite()).as("check disponibilite").isEqualTo(actual.getDisponibilite()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanificateurUpdatableRelationshipsEquals(Planificateur expected, Planificateur actual) {
        assertThat(expected)
            .as("Verify Planificateur relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
